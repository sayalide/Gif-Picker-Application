[{"/Users/sayalidilipdeshmukh/Desktop/giphy picker app/Giphy-picker/src/index.tsx":"1","/Users/sayalidilipdeshmukh/Desktop/giphy picker app/Giphy-picker/src/App.tsx":"2","/Users/sayalidilipdeshmukh/Desktop/giphy picker app/Giphy-picker/src/GifPicker.tsx":"3"},{"size":199,"mtime":1687552970000,"results":"4","hashOfConfig":"5"},{"size":252,"mtime":1687452735000,"results":"6","hashOfConfig":"5"},{"size":8821,"mtime":1687390842000,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1yfpssi",{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},"/Users/sayalidilipdeshmukh/Desktop/giphy picker app/Giphy-picker/src/index.tsx",[],[],"/Users/sayalidilipdeshmukh/Desktop/giphy picker app/Giphy-picker/src/App.tsx",[],[],"/Users/sayalidilipdeshmukh/Desktop/giphy picker app/Giphy-picker/src/GifPicker.tsx",["18","19"],[],"import React, { useState, useEffect, ChangeEvent, KeyboardEvent, lazy, Suspense } from \"react\";\nimport { Button, TextField, CircularProgress, Typography, Paper, Grid, Dialog, DialogTitle, DialogContent, DialogActions } from \"@material-ui/core\";\nimport { Search } from \"@material-ui/icons\";\n\nconst API_KEY = \"oWMik3POHlNAyTrd6mVPMIpR20X0Lw1E\";\n\ninterface Gif {\n  id: string;\n  images: {\n    fixed_width: {\n      mp4: string;\n    };\n  };\n}\n\nconst LazyGifPicker: React.FC = lazy(() => import(\"./GifPicker\"));\n\nconst App: React.FC = () => {\n  const [showPicker, setShowPicker] = useState(false);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setShowPicker(true);\n    }, 1500);\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  return (\n    <div style={{ textAlign: \"center\", marginTop: \"20vh\" }}>\n      {showPicker ? (\n        <Suspense fallback={<CircularProgress />}>\n          <LazyGifPicker />\n        </Suspense>\n      ) : (\n        <CircularProgress />\n      )}\n    </div>\n  );\n};\n\nconst GifPicker: React.FC = () => {\n  const [query, setQuery] = useState<string>(\"\");\n  const [gifs, setGifs] = useState<Gif[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<boolean>(false);\n  const [copied, setCopied] = useState<string>(\"\");\n  const [limitExceeded, setLimitExceeded] = useState<boolean>(false);\n  const [suggestions, setSuggestions] = useState<string[]>([]);\n  const [openAboutDialog, setOpenAboutDialog] = useState<boolean>(false);\n  const [requestCount, setRequestCount] = useState<number>(0);\n  const [lastRequestTimestamp, setLastRequestTimestamp] = useState<number | null>(null);\n\n  useEffect(() => {\n    const fetchRandomGifs = async () => {\n      try {\n        const response = await fetch(\n          `https://api.giphy.com/v1/gifs/trending?api_key=${API_KEY}&limit=3`\n        );\n        const data = await response.json();\n\n        if (response.status === 429) {\n          setLimitExceeded(true);\n        } else {\n          const gifData = data.data.map((gif: any) => ({\n            id: gif.id,\n            images: gif.images,\n          }));\n          setGifs(gifData);\n        }\n      } catch (error) {\n        console.error(\"Error fetching random GIFs:\", error);\n      }\n    };\n\n    fetchRandomGifs();\n  }, []);\n\n  const handleInputChange = async (event: ChangeEvent<HTMLInputElement>) => {\n    const value = event.target.value;\n    setQuery(value);\n\n    try {\n      if (value.trim() !== \"\") {\n        const response = await fetch(\n          `https://api.giphy.com/v1/gifs/search/tags?api_key=${API_KEY}&q=${encodeURIComponent(\n            value\n          )}&limit=5`\n        );\n        const data = await response.json();\n\n        if (response.status === 200) {\n          const suggestionsData = data.data.map((suggestion: any) => suggestion.name);\n          setSuggestions(suggestionsData);\n        }\n      } else {\n        setSuggestions([]);\n      }\n    } catch (error) {\n      console.error(\"Error fetching search suggestions:\", error);\n    }\n  };\n\n  const handleSuggestionClick = async (\n    event: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    suggestion: string\n  ) => {\n    event.preventDefault();\n    setQuery(suggestion);\n    await searchGifs(suggestion);\n  };\n\n  const searchGifs = async (searchQuery?: string) => {\n  setSuggestions([]); // Clear suggestions\n\n  const queryValue = searchQuery || query;\n  if (queryValue.trim() === \"\") {\n    return;\n  }\n\n  setLoading(true);\n  setError(false);\n  setLimitExceeded(false); // Reset the limit exceeded state\n\n  try {\n    if (requestCount >= 42 || requestCount >= 1000) {\n      setLimitExceeded(true); // Set the limit exceeded state\n      alert(\"API limit reached. You can only see previous results.\");\n    } else {\n      const response = await fetch(\n        `https://api.giphy.com/v1/gifs/search?api_key=${API_KEY}&q=${encodeURIComponent(\n          queryValue\n        )}&limit=10&format=mp4` // Specify format=mp4\n      );\n\n      if (response.status === 429) {\n        setLimitExceeded(true); // Set the limit exceeded state\n        alert(\"API limit reached. You can only see previous results.\");\n      } else {\n        const data = await response.json();\n        const gifData = data.data.map((gif: any) => ({\n          id: gif.id,\n          images: gif.images,\n        }));\n        setGifs(gifData);\n      }\n    }\n  } catch (error) {\n    console.error(\"Error searching GIFs:\", error);\n    setError(true);\n  }\n\n  setLoading(false);\n\n  // Update the request count and last request timestamp\n  setRequestCount((prevCount) => prevCount + 1);\n  setLastRequestTimestamp(Date.now());\n};\n\n  \n  const copyToClipboard = (url: string) => {\n    navigator.clipboard.writeText(url);\n    setCopied(url);\n    setTimeout(() => {\n      setCopied(\"\");\n      if (document.hasFocus()) {\n        window.alert(\"GIF URL copied to clipboard!\");\n      }\n    }, 100);\n  };\n  \n  const handleKeyPress = (event: KeyboardEvent) => {\n    if (event.key === \"Enter\") {\n      searchGifs();\n    }\n  };\n\n  const handleAboutClick = () => {\n    setOpenAboutDialog(true);\n  };\n\n  const handleAboutClose = () => {\n    setOpenAboutDialog(false);\n  };\n\n  return (\n    <div style={{ maxWidth: 600, margin: \"0 auto\" }}>\n      <div style={{ display: \"flex\", alignItems: \"center\" }}>\n        <TextField\n          label=\"Search for GIFs\"\n          value={query}\n          onChange={handleInputChange}\n          variant=\"outlined\"\n          fullWidth\n          onKeyPress={handleKeyPress}\n          style={{ marginRight: 8 }}\n        />\n        <Button variant=\"contained\" color=\"primary\" onClick={() => searchGifs()}>\n          <Search />\n        </Button>\n        <Button variant=\"outlined\" onClick={handleAboutClick} style={{ marginLeft: 8 }}>\n          About\n        </Button>\n      </div>\n      {suggestions.length > 0 && (\n        <Paper style={{ position: \"relative\", marginTop: 16 }}>\n          {suggestions.map((suggestion) => (\n            <Typography\n              key={suggestion}\n              variant=\"body2\"\n              onClick={(event) => handleSuggestionClick(event as any, suggestion)}\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                cursor: \"pointer\",\n                padding: 8,\n                fontWeight: \"bold\",\n                marginBottom: 8,\n                borderRadius: 4,\n              }}\n            >\n              {suggestion}\n            </Typography>\n          ))}\n        </Paper>\n      )}\n\n      {loading && <CircularProgress style={{ marginTop: 16 }} />}\n      {limitExceeded && (\n        <Typography color=\"error\" style={{ marginTop: 16 }}>\n          API limit exceeded. Please try again later.\n        </Typography>\n      )}\n      {error && <Typography color=\"error\" style={{ marginTop: 16 }}>Error fetching GIFs.</Typography>}\n      <Grid container spacing={2} style={{ marginTop: 16 }}>\n        {gifs.length > 0 ? (\n          gifs.map((gif) => (\n            <Grid item xs={4} key={gif.id}>\n              <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\n                <video autoPlay loop src={gif.images.fixed_width.mp4} style={{ width: \"100%\", marginBottom: 8 }}></video>\n                <Button\n                  variant=\"contained\"\n                  onClick={() => copyToClipboard(gif.images.fixed_width.mp4)}\n                  style={{\n                    width: \"100%\",\n                    backgroundColor: \"#2196f3\",\n                    color: \"white\",\n                    fontWeight: \"bold\",\n                  }}\n                >\n                  {copied === gif.images.fixed_width.mp4 ? \"Copied!\" : \"Copy to Clipboard\"}\n                </Button>\n              </div>\n            </Grid>\n          ))\n        ) : (\n          <Grid item xs={12}>\n            <Typography variant=\"body2\" style={{ color: \"white\", backgroundColor: \"#f44336\", padding: 8, borderRadius: 4 }}>\n              No GIFs found.\n            </Typography>\n          </Grid>\n        )}\n      </Grid>\n      <Dialog open={openAboutDialog} onClose={handleAboutClose}>\n        <DialogTitle>About GIPHY</DialogTitle>\n        <DialogContent>\n          <Typography>\n            GIPHY is an online database and search engine that allows users to search for and share animated GIF files.\n            You can find more information about GIPHY on their website:\n          </Typography>\n          <Typography>\n            <a href=\"https://giphy.com/\" target=\"_blank\" rel=\"noopener noreferrer\">\n              https://giphy.com/\n            </a>\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleAboutClose} color=\"primary\" autoFocus>\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default GifPicker;\n",{"ruleId":"20","severity":1,"message":"21","line":18,"column":7,"nodeType":"22","messageId":"23","endLine":18,"endColumn":20},{"ruleId":"20","severity":1,"message":"24","line":52,"column":10,"nodeType":"22","messageId":"23","endLine":52,"endColumn":30},"@typescript-eslint/no-unused-vars","'App' is assigned a value but never used.","Identifier","unusedVar","'lastRequestTimestamp' is assigned a value but never used."]